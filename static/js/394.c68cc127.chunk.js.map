{"version":3,"file":"static/js/394.c68cc127.chunk.js","mappings":"oPAkFA,UAvEqB,WACnB,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0CF,EAAAA,EAAAA,UAAS,MAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KACA,GAA0CJ,EAAAA,EAAAA,UAAS,IAAnD,eAAOK,EAAP,KAAsBC,EAAtB,KACMC,GAAWC,EAAAA,EAAAA,OAGjBC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE2BC,EAAAA,EAAAA,MAF3B,OAEUC,EAFV,OAGIT,EAAUS,EAASC,KAAKX,QAH5B,gDAKIY,QAAQC,MAAM,wJAAd,MALJ,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,KAEHN,EAAAA,EAAAA,YAAU,WAAM,wCACd,uFACON,EADP,2EAG2Ba,EAAAA,EAAAA,IAAmB,cAAeb,GAH7D,OAGUQ,EAHV,OAIIL,EAAiBK,EAASC,KAAKK,SAJnC,gDAMIJ,QAAQC,MAAM,oKAAd,MANJ,0DADc,uBAAC,WAAD,wBAUdI,EACD,GAAE,CAACf,IAMJ,OACE,4BACE,oBAAQgB,MAAOhB,EAAeiB,SANR,SAAAC,GACxBjB,EAAiBiB,EAAEC,OAAOH,MAC3B,EAIG,WACE,mBAAQA,MAAM,GAAd,uFACClB,EAAOsB,KAAI,SAAAC,GAAK,OACf,mBAAuBL,MAAOK,EAAMC,GAApC,SACGD,EAAME,MADIF,EAAMC,GADJ,QAMnB,0BACE,SAAC,KAAD,UACGpB,EAAckB,KAAI,SAAAI,GACjB,OACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAGF,IAAMI,MAAO,CAAEC,KAAMvB,GAA7C,WACE,SAAC,KAAD,CACEwB,IAhDF,mCAgDiBJ,EAAGK,YAClBC,IAAI,GACJC,MAAM,MACNC,OAAO,SAET,SAAC,KAAD,WACE,SAAC,KAAD,UAAYR,EAAGS,MAAQT,EAAGS,MAAQT,EAAGD,aAT3BC,EAAGF,GActB,UAKV,C","sources":["pages/FilterGenres/FilterGenres.js"],"sourcesContent":["import {\n  FilmTitle,\n  GalleryList,\n  MovieImage,\n  MovieInfo,\n  PhotoCard,\n} from 'pages/Home/Home.styled';\nimport React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { fetchFilmGenres, fetchFilteredFilms } from '../../services/fetchApi'; // замените 'yourAPIfile' на имя вашего файла API\n\nconst FilterGenres = () => {\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState(null);\n  const [filteredFilms, setFilteredFilms] = useState([]);\n  const location = useNavigate();\n  const baseURL = 'https://image.tmdb.org/t/p/w500/';\n\n  useEffect(() => {\n    async function getGenres() {\n      try {\n        const response = await fetchFilmGenres();\n        setGenres(response.data.genres);\n      } catch (error) {\n        console.error('Ошибка при получении жанров: ', error);\n      }\n    }\n    getGenres();\n  }, []);\n\n  useEffect(() => {\n    async function getFilteredFilms() {\n      if (!selectedGenre) return;\n      try {\n        const response = await fetchFilteredFilms('with_genres', selectedGenre);\n        setFilteredFilms(response.data.results);\n      } catch (error) {\n        console.error('Ошибка при фильтрации фильмов: ', error);\n      }\n    }\n    getFilteredFilms();\n  }, [selectedGenre]);\n\n  const handleGenreChange = e => {\n    setSelectedGenre(e.target.value);\n  };\n\n  return (\n    <div>\n      <select value={selectedGenre} onChange={handleGenreChange}>\n        <option value=\"\">Выберите жанр</option>\n        {genres.map(genre => (\n          <option key={genre.id} value={genre.id}>\n            {genre.name}\n          </option>\n        ))}\n      </select>\n      <div>\n        <GalleryList>\n          {filteredFilms.map(el => {\n            return (\n              <PhotoCard key={el.id}>\n                <Link to={`/movies/${el.id}`} state={{ from: location }}>\n                  <MovieImage\n                    src={baseURL + el.poster_path}\n                    alt=\"\"\n                    width=\"500\"\n                    height=\"750\"\n                  />\n                  <MovieInfo>\n                    <FilmTitle>{el.title ? el.title : el.name}</FilmTitle>\n                  </MovieInfo>\n                </Link>\n              </PhotoCard>\n            );\n          })}\n        </GalleryList>\n      </div>\n    </div>\n  );\n};\n\nexport default FilterGenres;\n"],"names":["useState","genres","setGenres","selectedGenre","setSelectedGenre","filteredFilms","setFilteredFilms","location","useNavigate","useEffect","fetchFilmGenres","response","data","console","error","getGenres","fetchFilteredFilms","results","getFilteredFilms","value","onChange","e","target","map","genre","id","name","el","to","state","from","src","poster_path","alt","width","height","title"],"sourceRoot":""}